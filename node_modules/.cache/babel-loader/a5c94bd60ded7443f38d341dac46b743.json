{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, NotifyPropertyChanges, ChildProperty, Property, Collection, append, extend, Event, EventHandler, closest, addClass, removeClass, detach, remove } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { Popup } from '@syncfusion/ej2-popups';\nvar ICONRIGHT = 'e-icon-right';\nvar ITEMTEXTCLASS = 'e-breadcrumb-text';\nvar ICONCLASS = 'e-breadcrumb-icon';\nvar MENUCLASS = 'e-breadcrumb-menu';\nvar ITEMCLASS = 'e-breadcrumb-item';\nvar POPUPCLASS = 'e-breadcrumb-popup';\nvar WRAPMODECLASS = 'e-breadcrumb-wrap-mode';\nvar SCROLLMODECLASS = 'e-breadcrumb-scroll-mode';\nvar TABINDEX = 'tabindex';\nvar DISABLEDCLASS = 'e-disabled';\nvar ARIADISABLED = 'aria-disabled';\nvar DOT = '.';\n\nvar BreadcrumbItem =\n/** @class */\nfunction (_super) {\n  __extends(BreadcrumbItem, _super);\n\n  function BreadcrumbItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], BreadcrumbItem.prototype, \"text\", void 0);\n\n  __decorate([Property('')], BreadcrumbItem.prototype, \"url\", void 0);\n\n  __decorate([Property(null)], BreadcrumbItem.prototype, \"iconCss\", void 0);\n\n  __decorate([Property(false)], BreadcrumbItem.prototype, \"disabled\", void 0);\n\n  return BreadcrumbItem;\n}(ChildProperty);\n\nexport { BreadcrumbItem };\n/**\n * Breadcrumb is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\n * The aim is to make the user aware of their current position in a hierarchy of website links.\n * ```html\n * <nav id='breadcrumb'></nav>\n * ```\n * ```typescript\n * <script>\n * var breadcrumbObj = new Breadcrumb({ items: [{ text: 'Home', url: '/' }, { text: 'Index', url: './index.html }]});\n * breadcrumbObj.appendTo(\"#breadcrumb\");\n * </script>\n * ```\n */\n\nvar Breadcrumb =\n/** @class */\nfunction (_super) {\n  __extends(Breadcrumb, _super);\n  /**\n   * Constructor for creating the widget.\n   *\n   * @private\n   * @param {BreadcrumbModel} options - Specifies the Breadcrumb model.\n   * @param {string | HTMLElement} element - Specifies the element.\n   */\n\n\n  function Breadcrumb(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  Breadcrumb.prototype.preRender = function () {// pre render code\n  };\n  /**\n   * Initialize the control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Breadcrumb.prototype.render = function () {\n    this.initialize();\n    this.renderItems(this.items);\n    this.wireEvents();\n  };\n\n  Breadcrumb.prototype.initialize = function () {\n    this._maxItems = this.maxItems;\n    this.element.setAttribute('aria-label', 'breadcrumb');\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    }\n\n    if (this.disabled) {\n      this.element.classList.add(DISABLEDCLASS);\n      this.element.setAttribute(ARIADISABLED, 'true');\n    }\n\n    if (this.overflowMode === 'Wrap') {\n      this.element.classList.add(WRAPMODECLASS);\n    } else if (this.overflowMode === 'Scroll') {\n      this.element.classList.add(SCROLLMODECLASS);\n    }\n\n    this.initItems();\n    this.initPvtProps();\n  };\n\n  Breadcrumb.prototype.initPvtProps = function () {\n    if (this.overflowMode === 'Hidden' && this._maxItems > 0) {\n      this.endIndex = this.getEndIndex();\n      this.startIndex = this.endIndex + 1 - (this._maxItems - 1);\n    }\n\n    if (this.overflowMode === 'Menu') {\n      if (this._maxItems >= 0) {\n        this.startIndex = this._maxItems > 1 ? 1 : 0;\n        this.endIndex = this.getEndIndex();\n        this.popupUl = this.createElement('ul', {\n          attrs: {\n            TABINDEX: '0',\n            'role': 'menu'\n          }\n        });\n      } else {\n        this.startIndex = this.endIndex = null;\n      }\n    }\n  };\n\n  Breadcrumb.prototype.getEndIndex = function () {\n    var _this = this;\n\n    var endIndex;\n\n    if (this.activeItem) {\n      this.items.forEach(function (item, idx) {\n        if (item.url === _this.activeItem || item.text === _this.activeItem) {\n          endIndex = idx;\n        }\n      });\n    } else {\n      endIndex = this.items.length - 1;\n    }\n\n    return endIndex;\n  };\n\n  Breadcrumb.prototype.initItems = function () {\n    if (!this.items.length) {\n      var baseUri = void 0;\n      var uri = void 0;\n      var items = [];\n\n      if (this.url) {\n        var url = new URL(this.url, window.location.origin);\n        baseUri = url.origin + '/';\n        uri = url.href.split(baseUri)[1].split('/');\n      } else {\n        baseUri = window.location.origin + '/';\n        uri = window.location.href.split(baseUri)[1].split('/');\n      }\n\n      items.push({\n        iconCss: 'e-icons e-home',\n        url: baseUri\n      });\n\n      for (var i = 0; i < uri.length; i++) {\n        if (uri[i]) {\n          items.push({\n            text: uri[i],\n            url: baseUri + uri[i]\n          });\n          baseUri += uri[i] + '/';\n        }\n      }\n\n      this.setProperties({\n        items: items\n      }, true);\n    }\n  };\n\n  Breadcrumb.prototype.renderItems = function (items) {\n    var _this = this;\n\n    var item;\n    var isSingleLevel;\n    var isIconRight = this.element.classList.contains(ICONRIGHT);\n    var itemsLength = items.length;\n\n    if (itemsLength) {\n      var isActiveItem = void 0;\n      var isLastItem = void 0;\n      var isLastItemInPopup_1;\n      var j_1 = 0;\n      var wrapDiv = void 0;\n      var len = itemsLength * 2 - 1;\n      var isItemCancelled_1 = false;\n      var ol = this.createElement('ol', {\n        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-wrapped-ol' : ''\n      });\n      var firstOl = this.createElement('ol', {\n        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-first-ol' : ''\n      });\n      var showIcon = this.hasField(items, 'iconCss');\n      var isCollasped = this.overflowMode === 'Collapsed' && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;\n      var isDefaultOverflowMode_1 = this.overflowMode === 'Hidden' && this._maxItems > 0;\n\n      if (this.overflowMode === 'Menu' && this.popupUl) {\n        this.popupUl.innerHTML = '';\n      }\n\n      var listBaseOptions = {\n        moduleName: this.getModuleName(),\n        showIcon: showIcon,\n        itemNavigable: true,\n        itemCreated: function itemCreated(args) {\n          var isLastItem = args.curData.isLastItem;\n\n          if (isLastItem && args.item.children.length && !_this.itemTemplate) {\n            delete args.curData.isLastItem;\n\n            if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {\n              args.item.innerHTML = _this.createElement('span', {\n                className: ITEMTEXTCLASS,\n                innerHTML: args.item.children[0].innerHTML\n              }).outerHTML;\n            }\n          }\n\n          if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {\n            args.item.classList.add('e-icon-item');\n          }\n\n          if (isDefaultOverflowMode_1) {\n            args.item.setAttribute('item-index', j_1.toString());\n          }\n\n          var eventArgs = {\n            item: extend({}, args.curData.properties ? args.curData.properties : args.curData),\n            element: args.item,\n            cancel: false\n          };\n\n          _this.trigger('beforeItemRender', eventArgs);\n\n          isItemCancelled_1 = eventArgs.cancel;\n          var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);\n\n          if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {\n            args.item.querySelector('.e-anchor-wrap').appendChild(args.item.querySelector(DOT + ICONCLASS));\n          }\n\n          if (eventArgs.item.disabled) {\n            args.item.setAttribute(ARIADISABLED, 'true');\n            args.item.classList.add(DISABLEDCLASS);\n          }\n\n          if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {\n            args.item.children[0].setAttribute(TABINDEX, '-1');\n          }\n\n          if (args.curData.isEmptyUrl) {\n            args.item.children[0].removeAttribute('href');\n\n            if ((!isLastItem || isLastItem && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {\n              args.item.children[0].setAttribute(TABINDEX, '0');\n              EventHandler.add(args.item.children[0], 'keydown', _this.keyDownHandler, _this);\n            }\n          }\n\n          if (isLastItem) {\n            args.item.setAttribute('data-active-item', '');\n          }\n\n          if (!_this.itemTemplate) {\n            _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);\n          }\n        }\n      };\n\n      for (var i = 0; i < len; i % 2 && j_1++, i++) {\n        isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);\n\n        if (isCollasped && i > 1 && i < len - 2) {\n          continue;\n        } else if (isDefaultOverflowMode_1 && (j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true) && j_1 !== 0) {\n          continue;\n        }\n\n        if (i % 2) {\n          // separator item\n          wrapDiv = this.createElement('div', {\n            className: 'e-breadcrumb-item-wrapper'\n          });\n          listBaseOptions.template = this.separatorTemplate ? this.separatorTemplate : '/';\n          listBaseOptions.itemClass = 'e-breadcrumb-separator';\n          isSingleLevel = false;\n          item = [{\n            previousItem: items[j_1],\n            nextItem: items[j_1 + 1]\n          }];\n        } else {\n          // list item\n          listBaseOptions.itemClass = '';\n\n          if (this.itemTemplate) {\n            listBaseOptions.template = this.itemTemplate;\n            isSingleLevel = false;\n          } else {\n            isSingleLevel = true;\n          }\n\n          item = [extend({}, items[j_1].properties ? items[j_1].properties : items[j_1])];\n\n          if (!item[0].url && !this.itemTemplate) {\n            item = [extend({}, item[0], {\n              isEmptyUrl: true,\n              url: '#'\n            })];\n          }\n\n          isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === 'Menu') && j_1 === this.endIndex;\n\n          if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {\n            item[0].isLastItem = true;\n          }\n        }\n\n        var parent_1 = ol;\n        var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;\n\n        if (this.overflowMode === 'Menu' && (j_1 >= this.startIndex && j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {\n          if (i % 2) {\n            continue;\n          } else {\n            parent_1 = this.popupUl;\n\n            if (isLastItem) {\n              isLastItemInPopup_1 = true;\n            }\n          }\n        } else if (this.overflowMode === 'Wrap') {\n          if (i === 0) {\n            parent_1 = firstOl;\n          } else {\n            parent_1 = wrapDiv;\n          }\n        }\n\n        var li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;\n\n        if (!isItemCancelled_1) {\n          append(li, parent_1);\n        } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === 'Menu' || this.overflowMode === 'Wrap') {\n          items.splice(j_1, 1);\n          this.initPvtProps();\n          return this.reRenderItems();\n        } else if (i === len - 1 || isLastItem) {\n          remove(parent_1.lastElementChild);\n        }\n\n        if (this.overflowMode === 'Wrap' && i !== 0 && i % 2 === 0) {\n          ol.appendChild(wrapDiv);\n        }\n\n        if (isCollasped && i === 1) {\n          var li_1 = this.createElement('li', {\n            className: 'e-icons e-breadcrumb-collapsed',\n            attrs: {\n              TABINDEX: '0'\n            }\n          });\n          EventHandler.add(li_1, 'keyup', this.expandHandler, this);\n          ol.appendChild(li_1);\n        }\n\n        if (this.overflowMode === 'Menu' && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {\n          var menu = this.getMenuElement();\n          EventHandler.add(menu, 'keyup', this.keyDownHandler, this);\n          ol.appendChild(menu);\n        }\n\n        if (isActiveItem || isLastItem) {\n          break;\n        }\n\n        if (isItemCancelled_1) {\n          i++;\n        }\n      }\n\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      if (this.overflowMode === 'Wrap') {\n        this.element.appendChild(firstOl);\n      }\n\n      this.element.appendChild(ol);\n      this.calculateMaxItems();\n    }\n  };\n\n  Breadcrumb.prototype.calculateMaxItems = function () {\n    if (this.overflowMode === 'Hidden' || this.overflowMode === 'Collapsed' || this.overflowMode === 'Menu') {\n      var maxItems = void 0;\n      var width = this.element.offsetWidth;\n      var liElems = [].slice.call(this.element.children[0].children).reverse();\n      var liWidth = this.overflowMode === 'Menu' ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);\n\n      if (this.overflowMode === 'Menu') {\n        var menuEle = this.getMenuElement();\n        this.element.appendChild(menuEle);\n        liWidth += menuEle.offsetWidth;\n        remove(menuEle);\n      }\n\n      for (var i = 0; i < liElems.length - 2; i++) {\n        if (liWidth > width) {\n          maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === 'Menu' && i <= 2 ? 0 : 1);\n\n          if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems == -1) || this.maxItems == -1) && this._maxItems != maxItems) {\n            this._maxItems = maxItems;\n            this.initPvtProps();\n            return this.reRenderItems();\n          } else {\n            break;\n          }\n        } else {\n          if (this.overflowMode === 'Menu' && i === 2) {\n            liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;\n\n            if (liWidth > width) {\n              this._maxItems = 1;\n              this.initPvtProps();\n              return this.reRenderItems();\n            }\n          }\n\n          if (!(this.overflowMode === 'Menu' && liElems[i].classList.contains(MENUCLASS))) {\n            liWidth += liElems[i].offsetWidth;\n          }\n        }\n      }\n    } else if ((this.overflowMode === 'Wrap' || this.overflowMode === 'Scroll') && this._maxItems > 0) {\n      var width = 0;\n      var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);\n\n      if (liElems.length > this._maxItems + this._maxItems - 1) {\n        for (var i = this.overflowMode === 'Wrap' ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {\n          width += liElems[i].offsetWidth;\n        }\n\n        width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;\n\n        if (this.overflowMode === 'Wrap') {\n          this.element.querySelector('.e-breadcrumb-wrapped-ol').style.width = width + 'px';\n        } else {\n          this.element.style.width = width + 'px';\n        }\n      }\n    }\n  };\n\n  Breadcrumb.prototype.hasField = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Breadcrumb.prototype.getMenuElement = function () {\n    return this.createElement('li', {\n      className: 'e-icons e-breadcrumb-menu',\n      attrs: {\n        TABINDEX: '0'\n      }\n    });\n  };\n\n  Breadcrumb.prototype.beforeItemRenderChanges = function (prevItem, currItem, elem, isRightIcon) {\n    var wrapElem = elem.querySelector('.e-anchor-wrap');\n\n    if (currItem.text !== prevItem.text) {\n      wrapElem.childNodes.forEach(function (child) {\n        if (child.nodeType === Node.TEXT_NODE) {\n          child.textContent = currItem.text;\n        }\n      });\n    }\n\n    if (currItem.iconCss !== prevItem.iconCss && wrapElem) {\n      // wrapElem - for checking it is item not a separator\n      var iconElem = elem.querySelector(DOT + ICONCLASS);\n\n      if (iconElem) {\n        if (currItem.iconCss) {\n          removeClass([iconElem], prevItem.iconCss.split(' '));\n          addClass([iconElem], currItem.iconCss.split(' '));\n        } else {\n          remove(iconElem);\n        }\n      } else if (currItem.iconCss) {\n        var iconElem_1 = this.createElement('span', {\n          className: ICONCLASS + ' ' + currItem.iconCss\n        });\n\n        if (isRightIcon) {\n          append([iconElem_1], wrapElem);\n        } else {\n          wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);\n        }\n      }\n    }\n\n    if (currItem.url !== prevItem.url && this.enableNavigation) {\n      var anchor = elem.querySelector('a.' + ITEMTEXTCLASS);\n\n      if (anchor) {\n        if (currItem.url) {\n          anchor.setAttribute('href', currItem.url);\n        } else {\n          anchor.removeAttribute('href');\n        }\n      }\n    }\n  };\n\n  Breadcrumb.prototype.reRenderItems = function () {\n    this.element.innerHTML = '';\n    this.renderItems(this.items);\n  };\n\n  Breadcrumb.prototype.clickHandler = function (e) {\n    var li = closest(e.target, DOT + ITEMCLASS + ':not(.e-breadcrumb-separator)');\n\n    if (!this.enableNavigation) {\n      e.preventDefault();\n    }\n\n    if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {\n      var idx = void 0;\n\n      if (this.overflowMode === 'Wrap') {\n        idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);\n      } else {\n        idx = [].slice.call(li.parentElement.children).indexOf(li);\n      }\n\n      if (this.overflowMode === 'Menu') {\n        if (closest(e.target, DOT + POPUPCLASS)) {\n          idx += this.startIndex;\n          this.endIndex = idx;\n\n          if (e.type === 'keydown') {\n            this.documentClickHandler(e);\n          }\n        } else if (this.element.querySelector(DOT + MENUCLASS)) {\n          if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {\n            idx += this.popupUl.childElementCount * 2 - 2;\n            idx = Math.floor(idx / 2);\n            this.endIndex = idx;\n          } else {\n            this.startIndex = this.endIndex = idx;\n          }\n        } else {\n          idx = Math.floor(idx / 2);\n          this.startIndex = this.endIndex = idx;\n        }\n      } else {\n        idx = Math.floor(idx / 2);\n      }\n\n      if (this.overflowMode === 'Hidden' && this._maxItems > 0 && this.endIndex !== 0) {\n        idx = parseInt(li.getAttribute('item-index'), 10);\n\n        if (this.startIndex > 1) {\n          this.startIndex -= this.endIndex - idx;\n        }\n\n        this.endIndex = idx;\n      }\n\n      this.trigger('itemClick', {\n        element: li,\n        item: this.items[idx],\n        event: e\n      });\n      this.activeItem = this.items[idx].url || this.items[idx].text;\n      this.dataBind();\n    }\n\n    if (e.target.classList.contains('e-breadcrumb-collapsed')) {\n      this.isExpanded = true;\n      this.reRenderItems();\n    }\n\n    if (e.target.classList.contains(MENUCLASS)) {\n      this.renderPopup();\n    }\n  };\n\n  Breadcrumb.prototype.renderPopup = function () {\n    var _this = this;\n\n    var wrapper = this.createElement('div', {\n      className: POPUPCLASS + ' ' + this.cssClass + (this.enableRtl ? ' e-rtl' : '')\n    });\n    document.body.appendChild(wrapper);\n    this.popupObj = new Popup(wrapper, {\n      content: this.popupUl,\n      relateTo: this.element.querySelector(DOT + MENUCLASS),\n      enableRtl: this.enableRtl,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      collision: {\n        X: 'fit',\n        Y: 'flip'\n      },\n      open: function open() {\n        _this.popupUl.focus();\n      }\n    });\n    this.popupWireEvents();\n    this.popupObj.show();\n  };\n\n  Breadcrumb.prototype.documentClickHandler = function (e) {\n    if (this.overflowMode === 'Menu' && this.popupObj && this.popupObj.element.classList.contains('e-popup-open') && !closest(e.target, DOT + MENUCLASS)) {\n      this.popupObj.hide();\n      this.popupObj.destroy();\n      detach(this.popupObj.element);\n    }\n  };\n\n  Breadcrumb.prototype.resize = function () {\n    this._maxItems = this.maxItems;\n    this.initPvtProps();\n    this.reRenderItems();\n  };\n\n  Breadcrumb.prototype.expandHandler = function (e) {\n    if (e.key === 'Enter') {\n      this.isExpanded = true;\n      this.reRenderItems();\n    }\n  };\n\n  Breadcrumb.prototype.keyDownHandler = function (e) {\n    if (e.key === 'Enter') {\n      this.clickHandler(e);\n    }\n  };\n\n  Breadcrumb.prototype.popupKeyDownHandler = function (e) {\n    if (e.key === 'Escape') {\n      this.documentClickHandler(e);\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @private\n   * @param {BreadcrumbModel} newProp - Specifies the new properties.\n   * @param {BreadcrumbModel} oldProp - Specifies the old properties.\n   * @returns {void}\n   */\n\n\n  Breadcrumb.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'items':\n        case 'enableActiveItemNavigation':\n          this.reRenderItems();\n          break;\n\n        case 'activeItem':\n          this._maxItems = this.maxItems;\n          this.initPvtProps();\n          this.reRenderItems();\n          break;\n\n        case 'overflowMode':\n        case 'maxItems':\n          this._maxItems = this.maxItems;\n          this.initPvtProps();\n          this.reRenderItems();\n\n          if (oldProp.overflowMode === 'Wrap') {\n            this.element.classList.remove(WRAPMODECLASS);\n          } else if (newProp.overflowMode === 'Wrap') {\n            this.element.classList.add(WRAPMODECLASS);\n          }\n\n          if (oldProp.overflowMode === 'Scroll') {\n            this.element.classList.remove(SCROLLMODECLASS);\n          } else if (newProp.overflowMode === 'Scroll') {\n            this.element.classList.add(SCROLLMODECLASS);\n          }\n\n          break;\n\n        case 'url':\n          this.initItems();\n          this.reRenderItems();\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) {\n            this.reRenderItems();\n          }\n\n          break;\n\n        case 'enableRtl':\n          this.element.classList.toggle('e-rtl');\n          break;\n\n        case 'disabled':\n          this.element.classList.toggle(DISABLEDCLASS);\n          this.element.setAttribute(ARIADISABLED, newProp.disabled + '');\n          break;\n      }\n    }\n  };\n\n  Breadcrumb.prototype.wireEvents = function () {\n    this.delegateClickHanlder = this.documentClickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHanlder, this);\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    window.addEventListener('resize', this.resize.bind(this));\n  };\n\n  Breadcrumb.prototype.popupWireEvents = function () {\n    EventHandler.add(this.popupObj.element, 'click', this.clickHandler, this);\n    EventHandler.add(this.popupObj.element, 'keydown', this.popupKeyDownHandler, this);\n  };\n\n  Breadcrumb.prototype.unWireEvents = function () {\n    EventHandler.remove(document, 'click', this.delegateClickHanlder);\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    window.removeEventListener('resize', this.resize.bind(this));\n\n    if (this.popupObj) {\n      EventHandler.remove(this.popupObj.element, 'click', this.clickHandler);\n      EventHandler.remove(this.popupObj.element, 'keydown', this.popupKeyDownHandler);\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  Breadcrumb.prototype.getPersistData = function () {\n    return this.addOnPersist(['activeItem']);\n  };\n  /**\n   * Get module name.\n   *\n   * @private\n   * @returns {string} - Module Name\n   */\n\n\n  Breadcrumb.prototype.getModuleName = function () {\n    return 'breadcrumb';\n  };\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  Breadcrumb.prototype.destroy = function () {\n    var _this = this;\n\n    var classes = [];\n    var attributes = ['aria-label'];\n\n    if (this.cssClass) {\n      classes.concat(this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      classes.push('e-rtl');\n    }\n\n    if (this.disabled) {\n      classes.push(DISABLEDCLASS);\n      attributes.push(ARIADISABLED);\n    }\n\n    if (this.overflowMode === 'Wrap') {\n      classes.push(WRAPMODECLASS);\n    } else if (this.overflowMode === 'Scroll') {\n      classes.push(SCROLLMODECLASS);\n    }\n\n    this.unWireEvents();\n    this.element.innerHTML = '';\n    removeClass([this.element], classes);\n    attributes.forEach(function (attribute) {\n      _this.element.removeAttribute(attribute);\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  __decorate([Property('')], Breadcrumb.prototype, \"url\", void 0);\n\n  __decorate([Collection([], BreadcrumbItem)], Breadcrumb.prototype, \"items\", void 0);\n\n  __decorate([Property('')], Breadcrumb.prototype, \"activeItem\", void 0);\n\n  __decorate([Property(-1)], Breadcrumb.prototype, \"maxItems\", void 0);\n\n  __decorate([Property('Menu')], Breadcrumb.prototype, \"overflowMode\", void 0);\n\n  __decorate([Property('')], Breadcrumb.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(null)], Breadcrumb.prototype, \"itemTemplate\", void 0);\n\n  __decorate([Property('/')], Breadcrumb.prototype, \"separatorTemplate\", void 0);\n\n  __decorate([Property(true)], Breadcrumb.prototype, \"enableNavigation\", void 0);\n\n  __decorate([Property(false)], Breadcrumb.prototype, \"enableActiveItemNavigation\", void 0);\n\n  __decorate([Property(false)], Breadcrumb.prototype, \"disabled\", void 0);\n\n  __decorate([Property('')], Breadcrumb.prototype, \"locale\", void 0);\n\n  __decorate([Event()], Breadcrumb.prototype, \"beforeItemRender\", void 0);\n\n  __decorate([Event()], Breadcrumb.prototype, \"itemClick\", void 0);\n\n  __decorate([Event()], Breadcrumb.prototype, \"created\", void 0);\n\n  Breadcrumb = __decorate([NotifyPropertyChanges], Breadcrumb);\n  return Breadcrumb;\n}(Component);\n\nexport { Breadcrumb };","map":null,"metadata":{},"sourceType":"module"}