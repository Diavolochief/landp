{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, NotifyPropertyChanges, Property, Event } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, isNullOrUndefined } from '@syncfusion/ej2-base'; // Constant variables\n\nvar CLS_APPBAR = 'e-appbar';\nvar CLS_HORIZONTAL_BOTTOM = 'e-horizontal-bottom';\nvar CLS_STICKY = 'e-sticky';\nvar CLS_PROMINENT = 'e-prominent';\nvar CLS_DENSE = 'e-dense';\nvar CLS_RTL = 'e-rtl';\nvar CLS_LIGHT = 'e-light';\nvar CLS_DARK = 'e-dark';\nvar CLS_PRIMARY = 'e-primary';\nvar CLS_INHERIT = 'e-inherit';\n/**\n * The AppBar displays the information and actions related to the current application screen. It is used to show branding, screen titles, navigation, and actions.\n * Support to inherit colors from AppBar provided to <c>Button</c>, <c>DropDownButton</c>, <c>Menu</c> and <c>TextBox</c>.\n * Set <c>CssClass</c> property with <code>e-inherit</code> CSS class to inherit the background and color from AppBar.\n */\n\nvar AppBar =\n/** @class */\nfunction (_super) {\n  __extends(AppBar, _super);\n  /**\n   * Constructor for creating the AppBar widget\n   *\n   * @param {AppBarModel} options Accepts the AppBar model properties to initiate the rendering\n   * @param {string | HTMLElement} element Accepts the DOM element reference\n   */\n\n\n  function AppBar(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   *\n   * @returns {void}\n   */\n\n\n  AppBar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.element.classList.remove(CLS_APPBAR);\n    this.element.removeAttribute('style');\n    this.element.removeAttribute('role');\n  };\n\n  AppBar.prototype.getModuleName = function () {\n    return 'appbar';\n  };\n\n  AppBar.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n\n  AppBar.prototype.preRender = function () {// pre render code\n  };\n\n  AppBar.prototype.render = function () {\n    if (this.element.tagName !== 'HEADER') {\n      this.element.setAttribute('role', 'header');\n    }\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (this.position === 'Bottom') {\n      this.element.classList.add(CLS_HORIZONTAL_BOTTOM);\n    }\n\n    if (this.isSticky) {\n      this.element.classList.add(CLS_STICKY);\n    }\n\n    if (this.enableRtl) {\n      this.element.classList.add(CLS_RTL);\n    }\n\n    this.setHeightMode();\n    this.setColorMode();\n\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      this.setHtmlAttributes(this.htmlAttributes, this.element);\n    }\n  };\n\n  AppBar.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'mode':\n          removeClass([this.element], [CLS_DENSE, CLS_PROMINENT]);\n          this.setHeightMode();\n          break;\n\n        case 'position':\n          if (this.position === 'Bottom') {\n            addClass([this.element], CLS_HORIZONTAL_BOTTOM);\n          } else {\n            removeClass([this.element], CLS_HORIZONTAL_BOTTOM);\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'isSticky':\n          if (this.isSticky) {\n            addClass([this.element], CLS_STICKY);\n          } else {\n            removeClass([this.element], CLS_STICKY);\n          }\n\n          break;\n\n        case 'htmlAttributes':\n          if (!isNullOrUndefined(this.htmlAttributes)) {\n            if (!isNullOrUndefined(oldProp.htmlAttributes)) {\n              var keys = Object.keys(oldProp.htmlAttributes);\n\n              for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {\n                var key = keys_1[_b];\n\n                if (key === 'class') {\n                  removeClass([this.element], oldProp.htmlAttributes[key]);\n                } else {\n                  this.element.removeAttribute(key);\n                }\n              }\n            }\n\n            this.setHtmlAttributes(newProp.htmlAttributes, this.element);\n          }\n\n          break;\n\n        case 'colorMode':\n          removeClass([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);\n          this.setColorMode();\n          break;\n\n        case 'enableRtl':\n          if (this.enableRtl) {\n            addClass([this.element], CLS_RTL);\n          } else {\n            removeClass([this.element], CLS_RTL);\n          }\n\n          break;\n      }\n    }\n  };\n\n  AppBar.prototype.setHtmlAttributes = function (attribute, element) {\n    var keys = Object.keys(attribute);\n\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n      var key = keys_2[_i];\n\n      if (key === 'class') {\n        addClass([element], attribute[key]);\n      } else {\n        element.setAttribute(key, attribute[key]);\n      }\n    }\n  };\n\n  AppBar.prototype.setHeightMode = function () {\n    if (this.mode === 'Prominent') {\n      this.element.classList.add(CLS_PROMINENT);\n    } else if (this.mode === 'Dense') {\n      this.element.classList.add(CLS_DENSE);\n    }\n  };\n\n  AppBar.prototype.setColorMode = function () {\n    switch (this.colorMode) {\n      case 'Light':\n        this.element.classList.add(CLS_LIGHT);\n        break;\n\n      case 'Dark':\n        this.element.classList.add(CLS_DARK);\n        break;\n\n      case 'Primary':\n        this.element.classList.add(CLS_PRIMARY);\n        break;\n\n      case 'Inherit':\n        this.element.classList.add(CLS_INHERIT);\n        break;\n    }\n  };\n\n  __decorate([Property('Regular')], AppBar.prototype, \"mode\", void 0);\n\n  __decorate([Property('Top')], AppBar.prototype, \"position\", void 0);\n\n  __decorate([Property()], AppBar.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], AppBar.prototype, \"isSticky\", void 0);\n\n  __decorate([Property()], AppBar.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('Light')], AppBar.prototype, \"colorMode\", void 0);\n\n  __decorate([Event()], AppBar.prototype, \"created\", void 0);\n\n  __decorate([Event()], AppBar.prototype, \"destroyed\", void 0);\n\n  AppBar = __decorate([NotifyPropertyChanges], AppBar);\n  return AppBar;\n}(Component);\n\nexport { AppBar };","map":null,"metadata":{},"sourceType":"module"}