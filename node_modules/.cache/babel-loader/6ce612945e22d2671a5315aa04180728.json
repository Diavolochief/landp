{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nimport { Component, EventHandler, Collection, Property, Event, formatUnit, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { ChildProperty, addClass, removeClass, setStyleAttribute, attributes, getUniqueID, compile, getInstance, L10n } from '@syncfusion/ej2-base';\nimport { append, closest, isNullOrUndefined, remove, classList, Touch, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons'; // Constant variables\n\nvar CLS_CAROUSEL = 'e-carousel';\nvar CLS_ACTIVE = 'e-active';\nvar CLS_RTL = 'e-rtl';\nvar CLS_PARTIAL = 'e-partial';\nvar CLS_SLIDE_CONTAINER = 'e-carousel-slide-container';\nvar CLS_ITEMS = 'e-carousel-items';\nvar CLS_CLONED = 'e-cloned';\nvar CLS_ITEM = 'e-carousel-item';\nvar CLS_PREVIOUS = 'e-previous';\nvar CLS_NEXT = 'e-next';\nvar CLS_PREV_ICON = 'e-previous-icon';\nvar CLS_NEXT_ICON = 'e-next-icon';\nvar CLS_NAVIGATORS = 'e-carousel-navigators';\nvar CLS_INDICATORS = 'e-carousel-indicators';\nvar CLS_INDICATOR_BARS = 'e-indicator-bars';\nvar CLS_INDICATOR_BAR = 'e-indicator-bar';\nvar CLS_INDICATOR = 'e-indicator';\nvar CLS_ICON = 'e-icons';\nvar CLS_PLAY_PAUSE = 'e-play-pause';\nvar CLS_PLAY_ICON = 'e-play-icon';\nvar CLS_PAUSE_ICON = 'e-pause-icon';\nvar CLS_PREV_BUTTON = 'e-previous-button';\nvar CLS_NEXT_BUTTON = 'e-next-button';\nvar CLS_PLAY_BUTTON = 'e-play-button';\nvar CLS_FLAT = 'e-flat';\nvar CLS_ROUND = 'e-round';\nvar CLS_HOVER_ARROWS = 'e-hover-arrows';\nvar CLS_HOVER = 'e-carousel-hover';\nvar CLS_TEMPLATE = 'e-template';\nvar CLS_SLIDE_ANIMATION = 'e-carousel-slide-animation';\nvar CLS_FADE_ANIMATION = 'e-carousel-fade-animation';\nvar CLS_CUSTOM_ANIMATION = 'e-carousel-custom-animation';\nvar CLS_ANIMATION_NONE = 'e-carousel-animation-none';\nvar CLS_PREV_SLIDE = 'e-prev';\nvar CLS_NEXT_SLIDE = 'e-next';\nvar CLS_TRANSITION_START = 'e-transition-start';\nvar CLS_TRANSITION_END = 'e-transition-end';\n/** Specifies the carousel individual item. */\n\nvar CarouselItem =\n/** @class */\nfunction (_super) {\n  __extends(CarouselItem, _super);\n\n  function CarouselItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], CarouselItem.prototype, \"cssClass\", void 0);\n\n  __decorate([Property()], CarouselItem.prototype, \"interval\", void 0);\n\n  __decorate([Property()], CarouselItem.prototype, \"template\", void 0);\n\n  __decorate([Property()], CarouselItem.prototype, \"htmlAttributes\", void 0);\n\n  return CarouselItem;\n}(ChildProperty);\n\nexport { CarouselItem };\n\nvar Carousel =\n/** @class */\nfunction (_super) {\n  __extends(Carousel, _super);\n  /**\n   * Constructor for creating the Carousel widget\n   *\n   * @param {CarouselModel} options Accepts the carousel model properties to initiate the rendering\n   * @param {string | HTMLElement} element Accepts the DOM element reference\n   */\n\n\n  function Carousel(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  Carousel.prototype.getModuleName = function () {\n    return CLS_CAROUSEL.replace('e-', '');\n  };\n\n  Carousel.prototype.getPersistData = function () {\n    return this.addOnPersist(['selectedIndex']);\n  };\n\n  Carousel.prototype.preRender = function () {\n    this.keyConfigs = {\n      home: 'home',\n      end: 'end',\n      space: 'space',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow'\n    };\n    var defaultLocale = {\n      nextSlide: 'Next slide',\n      of: 'of',\n      pauseSlideTransition: 'Pause slide transition',\n      playSlideTransition: 'Play slide transition',\n      previousSlide: 'Previous slide',\n      slide: 'Slide',\n      slideShow: 'Slide show'\n    };\n    this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);\n  };\n\n  Carousel.prototype.render = function () {\n    this.initialize();\n    this.renderSlides();\n    this.renderNavigators();\n    this.renderPlayButton();\n    this.renderIndicators();\n    this.applyAnimation();\n    this.wireEvents();\n  };\n\n  Carousel.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var target;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'animationEffect':\n          this.applyAnimation();\n          break;\n\n        case 'cssClass':\n          classList(this.element, [newProp.cssClass], [oldProp.cssClass]);\n          break;\n\n        case 'selectedIndex':\n          this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? 'Previous' : 'Next');\n          this.autoSlide();\n          break;\n\n        case 'htmlAttributes':\n          if (!isNullOrUndefined(this.htmlAttributes)) {\n            this.setHtmlAttributes(this.htmlAttributes, this.element);\n          }\n\n          break;\n\n        case 'enableTouchSwipe':\n          if (!this.enableTouchSwipe && this.touchModule) {\n            this.touchModule.destroy();\n          }\n\n          if (this.element.querySelector(\".\" + CLS_ITEMS)) {\n            this.renderTouchActions();\n          }\n\n          break;\n\n        case 'loop':\n          if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {\n            this.applySlideInterval();\n          }\n\n          this.handleNavigatorsActions(this.selectedIndex);\n\n          if (this.partialVisible) {\n            this.reRenderSlides();\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (this.enableRtl) {\n            addClass([this.element], CLS_RTL);\n          } else {\n            removeClass([this.element], CLS_RTL);\n          }\n\n          break;\n\n        case 'buttonsVisibility':\n          target = this.element.querySelector(\".\" + CLS_NAVIGATORS);\n\n          if (target) {\n            switch (this.buttonsVisibility) {\n              case 'Hidden':\n                this.resetTemplates(['previousButtonTemplate', 'nextButtonTemplate']);\n                remove(target);\n                break;\n\n              case 'VisibleOnHover':\n                addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);\n                break;\n\n              case 'Visible':\n                removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);\n                break;\n            }\n          } else {\n            this.renderNavigators();\n            this.renderPlayButton();\n          }\n\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(this.width)\n          });\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(this.height)\n          });\n          break;\n\n        case 'autoPlay':\n          if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {\n            this.playButtonClickHandler(null, true);\n          }\n\n          this.autoSlide();\n          break;\n\n        case 'interval':\n          this.autoSlide();\n          break;\n\n        case 'showIndicators':\n          target = this.element.querySelector(\".\" + CLS_INDICATORS);\n\n          if (!this.showIndicators && target) {\n            this.resetTemplates(['indicatorsTemplate']);\n            remove(target);\n          }\n\n          this.renderIndicators();\n          break;\n\n        case 'showPlayButton':\n          target = this.element.querySelector(\".\" + CLS_PLAY_PAUSE);\n\n          if (!this.showPlayButton && target) {\n            remove(target);\n            this.resetTemplates(['playButtonTemplate']);\n          }\n\n          this.renderPlayButton();\n          break;\n\n        case 'items':\n        case 'dataSource':\n          this.reRenderSlides();\n          break;\n\n        case 'partialVisible':\n          if (this.partialVisible) {\n            addClass([this.element], CLS_PARTIAL);\n          } else {\n            removeClass([this.element], CLS_PARTIAL);\n          }\n\n          this.reRenderSlides();\n          break;\n      }\n    }\n  };\n\n  Carousel.prototype.reRenderSlides = function () {\n    var target = this.element.querySelector(\".\" + CLS_ITEMS);\n\n    if (target) {\n      this.resetTemplates(['itemTemplate']);\n      remove(target);\n    }\n\n    this.renderSlides();\n  };\n\n  Carousel.prototype.initialize = function () {\n    var carouselClasses = [];\n\n    if (this.cssClass) {\n      carouselClasses.push(this.cssClass);\n    }\n\n    if (this.enableRtl) {\n      carouselClasses.push(CLS_RTL);\n    }\n\n    if (this.partialVisible) {\n      carouselClasses.push(CLS_PARTIAL);\n    }\n\n    addClass([this.element], carouselClasses);\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width),\n      'height': formatUnit(this.height)\n    });\n    attributes(this.element, {\n      'tabindex': '0',\n      'aria-roledescription': 'carousel',\n      'aria-label': this.localeObj.getConstant('slideShow')\n    });\n\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      this.setHtmlAttributes(this.htmlAttributes, this.element);\n    }\n  };\n\n  Carousel.prototype.renderSlides = function () {\n    var _this = this;\n\n    var slideContainer = this.element.querySelector('.' + CLS_SLIDE_CONTAINER);\n\n    if (!slideContainer) {\n      slideContainer = this.createElement('div', {\n        className: CLS_SLIDE_CONTAINER\n      });\n      this.element.appendChild(slideContainer);\n    }\n\n    var itemsContainer = this.createElement('div', {\n      className: CLS_ITEMS,\n      attrs: {\n        'aria-live': this.autoPlay ? 'off' : 'polite'\n      }\n    });\n    slideContainer.appendChild(itemsContainer);\n\n    if (this.partialVisible && this.loop) {\n      if (this.items.length > 0) {\n        this.items.slice(-2).forEach(function (item, index) {\n          _this.renderSlide(item, item.template, index, itemsContainer, true);\n        });\n      } else if (this.dataSource.length > 0) {\n        this.dataSource.slice(-2).forEach(function (item, index) {\n          _this.renderSlide(item, _this.itemTemplate, index, itemsContainer, true);\n        });\n      }\n    }\n\n    if (this.items.length > 0) {\n      this.slideItems = this.items;\n      this.items.forEach(function (item, index) {\n        _this.renderSlide(item, item.template, index, itemsContainer);\n      });\n    } else if (this.dataSource.length > 0) {\n      this.slideItems = this.dataSource;\n      this.dataSource.forEach(function (item, index) {\n        _this.renderSlide(item, _this.itemTemplate, index, itemsContainer);\n      });\n    }\n\n    if (this.partialVisible && this.loop) {\n      if (this.items.length > 0) {\n        this.items.slice(0, 2).forEach(function (item, index) {\n          _this.renderSlide(item, item.template, index, itemsContainer, true);\n        });\n      } else if (this.dataSource.length > 0) {\n        this.dataSource.slice(0, 2).forEach(function (item, index) {\n          _this.renderSlide(item, _this.itemTemplate, index, itemsContainer, true);\n        });\n      }\n    }\n\n    this.renderTemplates();\n\n    if (this.partialVisible) {\n      itemsContainer.style.setProperty('--carousel-items-count', \"\" + itemsContainer.children.length);\n      var slideWidth = itemsContainer.firstElementChild.clientWidth;\n      var cloneCount = this.loop ? 2 : 0;\n      itemsContainer.style.transitionProperty = 'none';\n      itemsContainer.style.transform = \"translateX(\" + -slideWidth * (this.selectedIndex + cloneCount) + \"px)\";\n    }\n\n    this.autoSlide();\n    this.renderTouchActions();\n    this.renderKeyboardActions();\n  };\n\n  Carousel.prototype.renderSlide = function (item, itemTemplate, index, container, isClone) {\n    if (isClone === void 0) {\n      isClone = false;\n    }\n\n    var itemEle = this.createElement('div', {\n      id: getUniqueID('carousel_item'),\n      className: CLS_ITEM + \" \" + (item.cssClass ? item.cssClass : '') + \" \" + (this.selectedIndex === index && !isClone ? CLS_ACTIVE : ''),\n      attrs: {\n        'aria-hidden': this.selectedIndex === index && !isClone ? 'false' : 'true',\n        'data-index': index.toString(),\n        'aria-role': 'group',\n        'aria-roledescription': 'slide'\n      }\n    });\n\n    if (isClone) {\n      itemEle.classList.add(CLS_CLONED);\n    }\n\n    if (!isNullOrUndefined(item.htmlAttributes)) {\n      this.setHtmlAttributes(item.htmlAttributes, itemEle);\n    }\n\n    var templateId = this.element.id + '_template';\n    var template = this.templateParser(itemTemplate)(item, this, 'itemTemplate', templateId, false);\n    append(template, itemEle);\n    container.appendChild(itemEle);\n  };\n\n  Carousel.prototype.renderNavigators = function () {\n    if (this.buttonsVisibility === 'Hidden') {\n      return;\n    }\n\n    var navigators = this.createElement('div', {\n      className: CLS_NAVIGATORS\n    });\n    var itemsContainer = this.element.querySelector(\".\" + CLS_SLIDE_CONTAINER);\n    itemsContainer.insertAdjacentElement('afterend', navigators);\n    this.renderNavigatorButton('Previous');\n    this.renderNavigatorButton('Next');\n    this.renderTemplates();\n  };\n\n  Carousel.prototype.renderNavigatorButton = function (direction) {\n    var buttonContainer = this.createElement('div', {\n      className: (direction === 'Previous' ? CLS_PREVIOUS : CLS_NEXT) + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')\n    });\n\n    if (direction === 'Previous' && this.previousButtonTemplate) {\n      addClass([buttonContainer], CLS_TEMPLATE);\n      var templateId = this.element.id + '_previousButtonTemplate';\n      var template = this.templateParser(this.previousButtonTemplate)({\n        type: 'Previous'\n      }, this, 'previousButtonTemplate', templateId, false);\n      append(template, buttonContainer);\n    } else if (direction === 'Next' && this.nextButtonTemplate) {\n      addClass([buttonContainer], CLS_TEMPLATE);\n      var templateId = this.element.id + '_nextButtonTemplate';\n      var template = this.templateParser(this.nextButtonTemplate)({\n        type: 'Next'\n      }, this, 'nextButtonTemplate', templateId, false);\n      append(template, buttonContainer);\n    } else {\n      var button = this.createElement('button', {\n        attrs: {\n          'aria-label': this.localeObj.getConstant(direction === 'Previous' ? 'previousSlide' : 'nextSlide')\n        }\n      });\n      var buttonObj = new Button({\n        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + (direction === 'Previous' ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),\n        iconCss: CLS_ICON + ' ' + (direction === 'Previous' ? CLS_PREV_ICON : CLS_NEXT_ICON),\n        enableRtl: this.enableRtl,\n        disabled: !this.loop && this.selectedIndex === (direction === 'Previous' ? 0 : this.slideItems.length - 1)\n      });\n      buttonObj.appendTo(button);\n      buttonContainer.appendChild(button);\n    }\n\n    this.element.querySelector('.' + CLS_NAVIGATORS).appendChild(buttonContainer);\n    EventHandler.add(buttonContainer, 'click', this.navigatorClickHandler, this);\n  };\n\n  Carousel.prototype.renderPlayButton = function () {\n    if (this.buttonsVisibility === 'Hidden' || !this.showPlayButton) {\n      return;\n    }\n\n    var playPauseWrap = this.createElement('div', {\n      className: CLS_PLAY_PAUSE + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')\n    });\n\n    if (this.playButtonTemplate) {\n      addClass([playPauseWrap], CLS_TEMPLATE);\n      var templateId = this.element.id + '_playButtonTemplate';\n      var template = this.templateParser(this.playButtonTemplate)({}, this, 'playButtonTemplate', templateId, false);\n      append(template, playPauseWrap);\n    } else {\n      var playButton = this.createElement('button', {\n        attrs: {\n          'aria-label': this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition')\n        }\n      });\n      var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;\n      var buttonObj = new Button({\n        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + CLS_PLAY_BUTTON,\n        iconCss: CLS_ICON + ' ' + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),\n        isToggle: true,\n        enableRtl: this.enableRtl\n      });\n\n      if (isLastSlide) {\n        this.setProperties({\n          autoPlay: false\n        }, true);\n        playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));\n        var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS);\n        itemsContainer.setAttribute('aria-live', 'polite');\n      }\n\n      buttonObj.appendTo(playButton);\n      playPauseWrap.appendChild(playButton);\n    }\n\n    var navigators = this.element.querySelector(\".\" + CLS_NAVIGATORS);\n    navigators.insertBefore(playPauseWrap, navigators.lastElementChild);\n    this.renderTemplates();\n    EventHandler.add(playPauseWrap, 'click', this.playButtonClickHandler, this);\n  };\n\n  Carousel.prototype.renderIndicators = function () {\n    var _this = this;\n\n    if (!this.showIndicators) {\n      return;\n    }\n\n    var indicatorWrap = this.createElement('div', {\n      className: CLS_INDICATORS\n    });\n    var indicatorBars = this.createElement('div', {\n      className: CLS_INDICATOR_BARS\n    });\n    indicatorWrap.appendChild(indicatorBars);\n\n    if (this.slideItems) {\n      this.slideItems.forEach(function (item, index) {\n        var indicatorBar = _this.createElement('div', {\n          className: CLS_INDICATOR_BAR + ' ' + (_this.selectedIndex === index ? CLS_ACTIVE : ''),\n          attrs: {\n            'data-index': index.toString(),\n            'aria-current': _this.selectedIndex === index ? 'true' : 'false'\n          }\n        });\n\n        if (_this.indicatorsTemplate) {\n          addClass([indicatorBar], CLS_TEMPLATE);\n          var templateId = _this.element.id + '_indicatorsTemplate';\n\n          var template = _this.templateParser(_this.indicatorsTemplate)({\n            index: index,\n            selectedIndex: _this.selectedIndex\n          }, _this, 'indicatorsTemplate', templateId, false);\n\n          append(template, indicatorBar);\n        } else {\n          var indicator = _this.createElement('button', {\n            className: CLS_INDICATOR\n          });\n\n          indicatorBar.appendChild(indicator);\n          indicator.appendChild(_this.createElement('div', {\n            attrs: {\n              'aria-label': _this.localeObj.getConstant('slide') + ' ' + (index + 1) + ' ' + _this.localeObj.getConstant('of') + ' ' + _this.slideItems.length\n            }\n          }));\n          var buttonObj = new Button({\n            cssClass: 'e-flat e-small'\n          });\n          buttonObj.appendTo(indicator);\n        }\n\n        indicatorBars.appendChild(indicatorBar);\n        EventHandler.add(indicatorBar, 'click', _this.indicatorClickHandler, _this);\n      });\n    }\n\n    this.element.appendChild(indicatorWrap);\n  };\n\n  Carousel.prototype.renderKeyboardActions = function () {\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n  };\n\n  Carousel.prototype.renderTouchActions = function () {\n    if (!this.enableTouchSwipe) {\n      return;\n    }\n\n    this.touchModule = new Touch(this.element, {\n      swipe: this.swipeHandler.bind(this)\n    });\n  };\n\n  Carousel.prototype.applyAnimation = function () {\n    removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);\n\n    switch (this.animationEffect) {\n      case 'Slide':\n        addClass([this.element], CLS_SLIDE_ANIMATION);\n        break;\n\n      case 'Fade':\n        addClass([this.element], CLS_FADE_ANIMATION);\n        break;\n\n      case 'None':\n        addClass([this.element], CLS_ANIMATION_NONE);\n        break;\n\n      case 'Custom':\n        addClass([this.element], CLS_CUSTOM_ANIMATION);\n        break;\n    }\n  };\n\n  Carousel.prototype.autoSlide = function () {\n    this.resetSlideInterval();\n    this.applySlideInterval();\n  };\n\n  Carousel.prototype.autoSlideChange = function () {\n    var activeSlide = this.element.querySelector(\".\" + CLS_ACTIVE);\n\n    if (isNullOrUndefined(activeSlide)) {\n      return;\n    }\n\n    var activeIndex = parseInt(activeSlide.dataset.index, 10);\n\n    if (!this.loop && activeIndex === this.slideItems.length - 1) {\n      this.resetSlideInterval();\n    } else {\n      var index = (activeIndex + 1) % this.slideItems.length;\n\n      if (!this.element.classList.contains(CLS_HOVER)) {\n        this.setActiveSlide(index, 'Next');\n      }\n\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.applySlideInterval = function () {\n    var _this = this;\n\n    if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {\n      return;\n    }\n\n    var itemInterval = this.interval;\n\n    if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex].interval)) {\n      itemInterval = this.items[this.selectedIndex].interval;\n    }\n\n    this.autoSlideInterval = setInterval(function () {\n      return _this.autoSlideChange();\n    }, itemInterval);\n  };\n\n  Carousel.prototype.resetSlideInterval = function () {\n    clearInterval(this.autoSlideInterval);\n    this.autoSlideInterval = null;\n  };\n\n  Carousel.prototype.getSlideIndex = function (direction) {\n    var currentIndex = this.selectedIndex;\n\n    if (direction === 'Previous') {\n      currentIndex--;\n\n      if (currentIndex < 0) {\n        currentIndex = this.slideItems.length - 1;\n      }\n    } else {\n      currentIndex++;\n\n      if (currentIndex === this.slideItems.length) {\n        currentIndex = 0;\n      }\n    }\n\n    return currentIndex;\n  };\n\n  Carousel.prototype.setActiveSlide = function (currentIndex, direction, isSwiped) {\n    var _this = this;\n\n    if (isSwiped === void 0) {\n      isSwiped = false;\n    }\n\n    if (this.element.querySelectorAll(\".\" + CLS_ITEM + \".\" + CLS_PREV_SLIDE + \",.\" + CLS_ITEM + \".\" + CLS_NEXT_SLIDE).length > 0) {\n      return;\n    }\n\n    var allSlides = [].slice.call(this.element.querySelectorAll(\".\" + CLS_ITEM + \":not(.e-cloned)\"));\n    var activeSlide = this.element.querySelector(\".\" + CLS_ITEM + \".\" + CLS_ACTIVE);\n\n    if (isNullOrUndefined(activeSlide) && this.showIndicators) {\n      var activeIndicator = this.element.querySelector(\".\" + CLS_INDICATOR_BAR + \".\" + CLS_ACTIVE);\n      var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);\n      addClass([allSlides[activeIndex_1]], CLS_ACTIVE);\n      return;\n    } else if (isNullOrUndefined(activeSlide)) {\n      addClass([allSlides[currentIndex]], CLS_ACTIVE);\n      return;\n    }\n\n    var activeIndex = parseInt(activeSlide.dataset.index, 10);\n    var currentSlide = allSlides[currentIndex];\n    var eventArgs = {\n      currentIndex: activeIndex,\n      nextIndex: currentIndex,\n      currentSlide: activeSlide,\n      nextSlide: currentSlide,\n      slideDirection: direction,\n      isSwiped: isSwiped,\n      cancel: false\n    };\n    this.trigger('slideChanging', eventArgs, function (args) {\n      if (args.cancel) {\n        return;\n      }\n\n      _this.setProperties({\n        selectedIndex: currentIndex\n      }, true);\n\n      attributes(args.currentSlide, {\n        'aria-hidden': 'true'\n      });\n      attributes(args.nextSlide, {\n        'aria-hidden': 'false'\n      });\n      var slideIndicators = [].slice.call(_this.element.querySelectorAll(\".\" + CLS_INDICATOR_BAR));\n\n      if (slideIndicators.length > 0) {\n        attributes(slideIndicators[activeIndex], {\n          'aria-current': 'false'\n        });\n        attributes(slideIndicators[currentIndex], {\n          'aria-current': 'true'\n        });\n        removeClass(slideIndicators, CLS_ACTIVE);\n        addClass([slideIndicators[currentIndex]], CLS_ACTIVE);\n      }\n\n      _this.slideChangedEventArgs = {\n        currentIndex: args.nextIndex,\n        previousIndex: args.currentIndex,\n        currentSlide: args.nextSlide,\n        previousSlide: args.currentSlide,\n        slideDirection: direction,\n        isSwiped: isSwiped\n      };\n\n      if (_this.partialVisible) {\n        var container = _this.element.querySelector('.' + CLS_ITEMS);\n\n        var slideWidth = allSlides[currentIndex].clientWidth;\n        container.style.transitionProperty = 'transform';\n\n        if (_this.loop) {\n          if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === 'Next') {\n            container.style.transform = \"translateX(\" + -slideWidth * (allSlides.length + 2) + \"px)\";\n          } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === 'Previous') {\n            container.style.transform = \"translateX(\" + -slideWidth + \"px)\";\n          } else {\n            container.style.transform = \"translateX(\" + -slideWidth * (currentIndex + 2) + \"px)\";\n          }\n        } else {\n          container.style.transform = \"translateX(\" + -slideWidth * currentIndex + \"px)\";\n        }\n      }\n\n      var slideHeight;\n\n      if (_this.animationEffect === 'Slide') {\n        if (direction === 'Previous') {\n          addClass([args.nextSlide], CLS_PREV_SLIDE);\n          slideHeight = args.nextSlide.offsetHeight;\n          addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);\n        } else {\n          addClass([args.nextSlide], CLS_NEXT_SLIDE); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n          slideHeight = args.nextSlide.offsetHeight;\n          addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);\n        }\n      } else if (_this.animationEffect === 'Fade') {\n        removeClass([args.currentSlide], CLS_ACTIVE);\n        addClass([args.nextSlide], CLS_ACTIVE);\n      } else if (_this.animationEffect === 'Custom') {\n        if (direction === 'Previous') {\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n          addClass([args.currentSlide], CLS_PREV_SLIDE);\n        } else {\n          addClass([args.currentSlide], CLS_PREV_SLIDE);\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n        }\n      } else {\n        _this.onTransitionEnd();\n      }\n\n      _this.handleNavigatorsActions(currentIndex);\n    });\n  };\n\n  Carousel.prototype.onTransitionEnd = function () {\n    var _this = this;\n\n    if (this.slideChangedEventArgs) {\n      if (this.partialVisible && this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === 'Next' || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === 'Previous')) {\n        var container = this.element.querySelector('.' + CLS_ITEMS);\n        var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;\n        container.style.transitionProperty = 'none';\n        container.style.transform = \"translate(\" + -slideWidth * (this.slideChangedEventArgs.currentIndex + 2) + \"px)\";\n      }\n\n      addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE);\n      removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE);\n      this.trigger('slideChanged', this.slideChangedEventArgs, function () {\n        removeClass(_this.element.querySelectorAll(\".\" + CLS_ITEM), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);\n        _this.slideChangedEventArgs = null;\n      });\n    }\n  };\n\n  Carousel.prototype.setHtmlAttributes = function (attribute, element) {\n    var keys = Object.keys(attribute);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (key === 'class') {\n        addClass([element], attribute[key]);\n      } else {\n        element.setAttribute(key, attribute[key]);\n      }\n    }\n  };\n\n  Carousel.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  };\n\n  Carousel.prototype.getNavigatorState = function (target, isPrevious) {\n    var button = target.querySelector(\".\" + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));\n\n    if (button) {\n      var buttonObj = getInstance(button, Button);\n      return buttonObj.disabled;\n    }\n\n    return false;\n  };\n\n  Carousel.prototype.navigatorClickHandler = function (e) {\n    var target = e.currentTarget;\n    var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));\n\n    if (isDisabled) {\n      return;\n    }\n\n    var direction = target.classList.contains(CLS_PREVIOUS) ? 'Previous' : 'Next';\n    this.setActiveSlide(this.getSlideIndex(direction), direction);\n    this.autoSlide();\n  };\n\n  Carousel.prototype.indicatorClickHandler = function (e) {\n    var target = closest(e.target, \".\" + CLS_INDICATOR_BAR);\n    var index = parseInt(target.dataset.index, 10);\n\n    if (this.selectedIndex !== index) {\n      this.setActiveSlide(index, this.selectedIndex > index ? 'Previous' : 'Next');\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.playButtonClickHandler = function (e, isPropertyChange) {\n    if (isPropertyChange === void 0) {\n      isPropertyChange = false;\n    }\n\n    var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n\n    if (playButton) {\n      var buttonObj = getInstance(playButton, Button);\n\n      if (!isPropertyChange) {\n        this.setProperties({\n          autoPlay: !this.autoPlay\n        }, true);\n      }\n\n      playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));\n      buttonObj.iconCss = CLS_ICON + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);\n      buttonObj.dataBind();\n      var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS);\n      itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');\n\n      if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {\n        this.setActiveSlide(0, 'Next');\n      }\n\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.keyHandler = function (e) {\n    var direction;\n    var slideIndex;\n    var isSlideTransition = false;\n    var target = e.target;\n    e.preventDefault();\n\n    switch (e.action) {\n      case 'space':\n        if (this.showIndicators && target.classList.contains(CLS_INDICATOR)) {\n          target.click();\n        } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {\n          this.playButtonClickHandler(e);\n        } else if (target.classList.contains(CLS_NEXT_BUTTON)) {\n          this.next();\n        } else if (target.classList.contains(CLS_PREV_BUTTON)) {\n          this.prev();\n        }\n\n        break;\n\n      case 'end':\n        slideIndex = this.slideItems.length - 1;\n        direction = 'Next';\n        isSlideTransition = true;\n        break;\n\n      case 'home':\n        slideIndex = 0;\n        direction = 'Previous';\n        isSlideTransition = true;\n        break;\n\n      case 'moveUp':\n      case 'moveLeft':\n      case 'moveDown':\n      case 'moveRight':\n        if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {\n          this.element.focus();\n        }\n\n        direction = e.action === 'moveUp' || e.action === 'moveLeft' ? 'Previous' : 'Next';\n        slideIndex = this.getSlideIndex(direction);\n        isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);\n        break;\n    }\n\n    if (isSlideTransition) {\n      this.setActiveSlide(slideIndex, direction);\n      this.autoSlide();\n      isSlideTransition = false;\n    }\n  };\n\n  Carousel.prototype.swipeHandler = function (e) {\n    if (this.element.classList.contains(CLS_HOVER)) {\n      return;\n    }\n\n    var direction = e.swipeDirection === 'Right' ? 'Previous' : 'Next';\n    var slideIndex = this.getSlideIndex(direction);\n\n    if (!this.isSuspendSlideTransition(slideIndex, direction)) {\n      this.setActiveSlide(slideIndex, direction, true);\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.isSuspendSlideTransition = function (index, direction) {\n    return !this.loop && (direction === 'Next' && index === 0 || direction === 'Previous' && index === this.slideItems.length - 1);\n  };\n\n  Carousel.prototype.handleNavigatorsActions = function (index) {\n    if (this.buttonsVisibility === 'Hidden') {\n      return;\n    }\n\n    if (this.showPlayButton) {\n      var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n      var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;\n      var isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;\n\n      if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {\n        isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE);\n      }\n\n      if (isButtonUpdate) {\n        this.setProperties({\n          autoPlay: !isLastSlide\n        }, true);\n        playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));\n        var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS);\n        itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');\n        var buttonObj = getInstance(playButton, Button);\n        buttonObj.iconCss = CLS_ICON + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);\n        buttonObj.dataBind();\n      }\n    }\n\n    var prevButton = this.element.querySelector(\".\" + CLS_PREV_BUTTON);\n\n    if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {\n      var buttonObj = getInstance(prevButton, Button);\n      buttonObj.disabled = !this.loop && index === 0;\n      buttonObj.dataBind();\n    }\n\n    var nextButton = this.element.querySelector(\".\" + CLS_NEXT_BUTTON);\n\n    if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {\n      var buttonObj = getInstance(nextButton, Button);\n      buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;\n      buttonObj.dataBind();\n    }\n  };\n\n  Carousel.prototype.onHoverActions = function (e) {\n    var navigator = this.element.querySelector(\".\" + CLS_NAVIGATORS);\n\n    switch (e.type) {\n      case 'mouseenter':\n        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {\n          removeClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);\n        }\n\n        if (this.pauseOnHover) {\n          addClass([this.element], CLS_HOVER);\n        }\n\n        break;\n\n      case 'mouseleave':\n        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {\n          addClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);\n        }\n\n        removeClass([this.element], CLS_HOVER);\n        break;\n    }\n\n    this.autoSlide();\n  };\n\n  Carousel.prototype.onFocusActions = function (e) {\n    switch (e.type) {\n      case 'focusin':\n        addClass([this.element], CLS_HOVER);\n        break;\n\n      case 'focusout':\n        removeClass([this.element], CLS_HOVER);\n        break;\n    }\n\n    this.autoSlide();\n  };\n\n  Carousel.prototype.destroyButtons = function () {\n    var buttonCollections = [].slice.call(this.element.querySelectorAll('.e-control.e-btn'));\n\n    for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {\n      var button = buttonCollections_1[_i];\n      var instance = getInstance(button, Button);\n\n      if (instance) {\n        instance.destroy();\n      }\n    }\n  };\n\n  Carousel.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'focusin focusout', this.onFocusActions, this);\n    EventHandler.add(this.element, 'mouseenter mouseleave', this.onHoverActions, this);\n    EventHandler.add(this.element.firstElementChild, 'animationend', this.onTransitionEnd, this);\n    EventHandler.add(this.element.firstElementChild, 'transitionend', this.onTransitionEnd, this);\n  };\n\n  Carousel.prototype.unWireEvents = function () {\n    var _this = this;\n\n    var indicators = [].slice.call(this.element.querySelectorAll(\".\" + CLS_INDICATOR_BAR));\n    indicators.forEach(function (indicator) {\n      EventHandler.remove(indicator, 'click', _this.indicatorClickHandler);\n    });\n    var navigators = [].slice.call(this.element.querySelectorAll(\".\" + CLS_PREVIOUS + \",.\" + CLS_NEXT));\n    navigators.forEach(function (navigator) {\n      EventHandler.remove(navigator, 'click', _this.navigatorClickHandler);\n    });\n    var playIcon = this.element.querySelector(\".\" + CLS_PLAY_PAUSE);\n\n    if (playIcon) {\n      EventHandler.remove(playIcon, 'click', this.playButtonClickHandler);\n    }\n\n    EventHandler.remove(this.element.firstElementChild, 'animationend', this.onTransitionEnd);\n    EventHandler.remove(this.element.firstElementChild, 'transitionend', this.onTransitionEnd);\n    EventHandler.clearEvents(this.element);\n  };\n  /**\n   * Method to transit from the current slide to the previous slide.\n   *\n   * @returns {void}\n   */\n\n\n  Carousel.prototype.prev = function () {\n    if (!this.loop && this.selectedIndex === 0) {\n      return;\n    }\n\n    var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;\n    this.setActiveSlide(index, 'Previous');\n    this.autoSlide();\n  };\n  /**\n   * Method to transit from the current slide to the next slide.\n   *\n   * @returns {void}\n   */\n\n\n  Carousel.prototype.next = function () {\n    if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {\n      return;\n    }\n\n    var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;\n    this.setActiveSlide(index, 'Next');\n    this.autoSlide();\n  };\n  /**\n   * Method to play the slides programmatically.\n   *\n   * @returns {void}\n   */\n\n\n  Carousel.prototype.play = function () {\n    var playIcon = this.element.querySelector(\".\" + CLS_PLAY_ICON);\n\n    if (this.showPlayButton && playIcon) {\n      classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);\n      var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n      playButton.setAttribute('aria-label', this.localeObj.getConstant('pauseSlideTransition'));\n    }\n\n    this.setProperties({\n      autoPlay: true\n    }, true);\n    var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS);\n    itemsContainer.setAttribute('aria-live', 'off');\n    this.applySlideInterval();\n  };\n  /**\n   * Method to pause the slides programmatically.\n   *\n   * @returns {void}\n   */\n\n\n  Carousel.prototype.pause = function () {\n    var pauseIcon = this.element.querySelector(\".\" + CLS_PAUSE_ICON);\n\n    if (this.showPlayButton && pauseIcon) {\n      var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n      playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));\n      classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);\n    }\n\n    this.setProperties({\n      autoPlay: false\n    }, true);\n    var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS);\n    itemsContainer.setAttribute('aria-live', 'off');\n    this.resetSlideInterval();\n  };\n  /**\n   * Method to render react and angular templates\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Carousel.prototype.renderTemplates = function () {\n    if (this.isAngular || this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\n   * Method to reset react and angular templates\n   *\n   * @param {string[]} templates Accepts the template ID\n   * @returns {void}\n   * @private\n   */\n\n\n  Carousel.prototype.resetTemplates = function (templates) {\n    if (this.isAngular || this.isReact) {\n      this.clearTemplate(templates);\n    }\n  };\n  /**\n   * Method for destroy the carousel component.\n   *\n   * @returns {void}\n   */\n\n\n  Carousel.prototype.destroy = function () {\n    var _this = this;\n\n    this.resetTemplates();\n\n    if (this.touchModule) {\n      this.touchModule.destroy();\n      this.touchModule = null;\n    }\n\n    this.keyModule.destroy();\n    this.keyModule = null;\n    this.resetSlideInterval();\n    this.destroyButtons();\n    this.unWireEvents();\n    [].slice.call(this.element.children).forEach(function (ele) {\n      _this.element.removeChild(ele);\n    });\n    removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL]);\n    ['tabindex', 'role', 'style'].forEach(function (attr) {\n      _this.element.removeAttribute(attr);\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  __decorate([Collection([], CarouselItem)], Carousel.prototype, \"items\", void 0);\n\n  __decorate([Property('Slide')], Carousel.prototype, \"animationEffect\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"previousButtonTemplate\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"nextButtonTemplate\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"indicatorsTemplate\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"playButtonTemplate\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"cssClass\", void 0);\n\n  __decorate([Property([])], Carousel.prototype, \"dataSource\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"itemTemplate\", void 0);\n\n  __decorate([Property(0)], Carousel.prototype, \"selectedIndex\", void 0);\n\n  __decorate([Property('100%')], Carousel.prototype, \"width\", void 0);\n\n  __decorate([Property('100%')], Carousel.prototype, \"height\", void 0);\n\n  __decorate([Property(5000)], Carousel.prototype, \"interval\", void 0);\n\n  __decorate([Property(true)], Carousel.prototype, \"autoPlay\", void 0);\n\n  __decorate([Property(true)], Carousel.prototype, \"pauseOnHover\", void 0);\n\n  __decorate([Property(true)], Carousel.prototype, \"loop\", void 0);\n\n  __decorate([Property(false)], Carousel.prototype, \"showPlayButton\", void 0);\n\n  __decorate([Property(true)], Carousel.prototype, \"enableTouchSwipe\", void 0);\n\n  __decorate([Property(true)], Carousel.prototype, \"showIndicators\", void 0);\n\n  __decorate([Property('Visible')], Carousel.prototype, \"buttonsVisibility\", void 0);\n\n  __decorate([Property(false)], Carousel.prototype, \"partialVisible\", void 0);\n\n  __decorate([Property()], Carousel.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Event()], Carousel.prototype, \"slideChanging\", void 0);\n\n  __decorate([Event()], Carousel.prototype, \"slideChanged\", void 0);\n\n  Carousel = __decorate([NotifyPropertyChanges], Carousel);\n  return Carousel;\n}(Component);\n\nexport { Carousel };","map":null,"metadata":{},"sourceType":"module"}