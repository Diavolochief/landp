{"ast":null,"code":"import { select, detach } from '@syncfusion/ej2-base';\nimport { VScroll } from './v-scroll';\nimport { HScroll } from './h-scroll';\n/**\n * Used to add scroll in menu.\n *\n * @param {createElementType} createElement - Specifies the create element model\n * @param {HTMLElement} container - Specifies the element container\n * @param {HTMLElement} content - Specifies the content element\n * @param {string} scrollType - Specifies the scroll type\n * @param {boolean} enableRtl - Specifies the enable RTL property\n * @param {boolean} offset - Specifies the offset value\n * @returns {HTMLElement} - Element\n * @hidden\n */\n\nexport function addScrolling(createElement, container, content, scrollType, enableRtl, offset) {\n  var containerOffset;\n  var contentOffset;\n  var parentElem = container.parentElement;\n\n  if (scrollType === 'vscroll') {\n    containerOffset = offset || container.getBoundingClientRect().height;\n    contentOffset = content.getBoundingClientRect().height;\n  } else {\n    containerOffset = container.getBoundingClientRect().width;\n    contentOffset = content.getBoundingClientRect().width;\n  }\n\n  if (containerOffset < contentOffset) {\n    return createScrollbar(createElement, container, content, scrollType, enableRtl, offset);\n  } else if (parentElem) {\n    var width = parentElem.getBoundingClientRect().width;\n\n    if (width < containerOffset && scrollType === 'hscroll') {\n      contentOffset = width;\n      container.style.maxWidth = width + 'px';\n      return createScrollbar(createElement, container, content, scrollType, enableRtl, offset);\n    }\n\n    return content;\n  } else {\n    return content;\n  }\n}\n/**\n * Used to create scroll bar in menu.\n *\n * @param {createElementType} createElement - Specifies the create element model\n * @param {HTMLElement} container - Specifies the element container\n * @param {HTMLElement} content - Specifies the content element\n * @param {string} scrollType - Specifies the scroll type\n * @param {boolean} enableRtl - Specifies the enable RTL property\n * @param {boolean} offset - Specifies the offset value\n * @returns {HTMLElement} - Element\n * @hidden\n */\n\nfunction createScrollbar(createElement, container, content, scrollType, enableRtl, offset) {\n  var scrollEle = createElement('div', {\n    className: 'e-menu-' + scrollType\n  });\n  container.appendChild(scrollEle);\n  scrollEle.appendChild(content);\n\n  if (offset) {\n    scrollEle.style.overflow = 'hidden';\n    scrollEle.style.height = offset + 'px';\n  } else {\n    scrollEle.style.maxHeight = container.style.maxHeight;\n    container.style.overflow = 'hidden';\n  }\n\n  var scrollObj;\n\n  if (scrollType === 'vscroll') {\n    scrollObj = new VScroll({\n      enableRtl: enableRtl\n    }, scrollEle);\n    scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetHeight / 2;\n  } else {\n    scrollObj = new HScroll({\n      enableRtl: enableRtl\n    }, scrollEle);\n    scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetWidth;\n  }\n\n  return scrollEle;\n}\n/**\n * Used to destroy the scroll option.\n *\n * @param {VScroll | HScroll} scrollObj - Specifies the scroller object\n * @param {Element} element - Specifies the element\n * @param {HTMLElement} skipEle - Specifies the skip  element\n * @returns {void}\n * @hidden\n */\n\n\nexport function destroyScroll(scrollObj, element, skipEle) {\n  if (scrollObj) {\n    var menu = select('.e-menu-parent', element);\n\n    if (menu) {\n      if (!skipEle || skipEle === menu) {\n        scrollObj.destroy();\n        element.parentElement.appendChild(menu);\n        detach(element);\n      }\n    } else {\n      scrollObj.destroy();\n      detach(element);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}