{"ast":null,"code":"/**\n * mlpushmenu.js v1.0.0\n * http://www.codrops.com\n *\n * Licensed under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n *\n * Copyright 2013, Codrops\n * http://www.codrops.com\n */\n'use strict';\n\nvar classie = require('./classie');\n\nmodule.exports = function (window) {\n  'use strict';\n\n  var classPrefix = 'rpm-',\n      _bodyClickFn = null,\n      levelsClass = 'div.' + classPrefix + 'mp-level';\n\n  function extend(a, b) {\n    for (var key in b) {\n      if (b.hasOwnProperty(key)) {\n        a[key] = b[key];\n      }\n    }\n\n    return a;\n  } // taken from https://github.com/inuyaksa/jquery.nicescroll/blob/master/jquery.nicescroll.js\n\n\n  function hasParent(e, id) {\n    if (!e) return false;\n    var el = e.target || e.srcElement || e || false;\n\n    while (el && el.id != id) {\n      el = el.parentNode || false;\n    }\n\n    return el !== false;\n  } // returns the depth of the element \"e\" relative to element with id=id\n  // for this calculation only parents with classname = waypoint are considered\n\n\n  function getLevelDepth(e, id, waypoint, cnt) {\n    cnt = cnt || 0;\n    if (e.id.indexOf(id) >= 0) return cnt;\n\n    if (classie.has(e, waypoint)) {\n      ++cnt;\n    }\n\n    return e.parentNode && getLevelDepth(e.parentNode, id, waypoint, cnt);\n  } // http://coveroverflow.com/a/11381730/989439\n\n\n  function mobilecheck() {\n    var check = false;\n\n    (function (a) {\n      if (/(android|ipad|playbook|silk|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true;\n    })(navigator.userAgent || navigator.vendor || window.opera);\n\n    return check;\n  } // returns the closest element to 'e' that has class \"classname\"\n\n\n  function closest(e, classname) {\n    if (classie.has(e, classname)) {\n      return e;\n    }\n\n    return e.parentNode && closest(e.parentNode, classname);\n  }\n\n  function mlPushMenu(el, trigger, options) {\n    this.el = el;\n    this.trigger = trigger;\n    this.options = extend(this.defaults, options); // support 3d transforms\n    // this.support = Modernizr.csstransforms3d;\n    // if( this.support ) {\n    // \tthis._init();\n    // }\n\n    this._init(this.options);\n  }\n\n  mlPushMenu.prototype = {\n    defaults: {\n      // overlap: there will be a gap between open levels\n      // cover: the open levels will be on top of any previous open level\n      type: 'overlap',\n      // overlap || cover\n      // space between each overlaped level\n      levelSpacing: 40,\n      // classname for the element (if any) that when clicked closes the current level\n      backClass: classPrefix + 'mp-back',\n      // whether the menu should hide when the user clicks outside of the menu element\n      autoHide: true\n    },\n    _init: function _init() {\n      // if menu is open or not\n      this.open = false; // level depth\n\n      this.level = 0; // the moving wrapper\n\n      this.wrapper = document.getElementById(classPrefix + 'mp-pusher'); // the mp-level elements\n\n      this.levels = Array.prototype.slice.call(this.el.querySelectorAll(levelsClass)); // save the depth of each of these mp-level elements\n\n      var self = this;\n      this.levels.forEach(function (el, i) {\n        el.setAttribute('data-level', getLevelDepth(el, self.el.id, classPrefix + 'mp-level'));\n      }); // the menu items\n\n      this.menuItems = Array.prototype.slice.call(this.el.querySelectorAll('li')); // if type == \"cover\" these will serve as hooks to move back to the previous level\n\n      this.levelBack = Array.prototype.slice.call(this.el.querySelectorAll('.' + this.options.backClass)); // event type (if mobile use touch events)\n      // this.eventtype = mobilecheck() ? 'touchstart' : 'click';\n\n      this.eventtype = 'click'; // add the class mp-overlap or mp-cover to the main element depending on options.type\n\n      classie.add(this.el, classPrefix + 'mp-' + this.options.type); // initialize / bind the necessary events\n\n      this._initEvents();\n\n      this.tools = {\n        open: this._openMenu.bind(self),\n        reset: this._resetMenu.bind(self),\n        close: this._closeMenu.bind(self)\n      };\n\n      if (this.options.open) {\n        self._openMenu();\n      }\n    },\n    _initEvents: function _initEvents() {\n      var self = this; // the menu should close if clicking somewhere on the body\n\n      _bodyClickFn = function bodyClickFn(el) {\n        self._resetMenu();\n\n        el.removeEventListener(self.eventtype, _bodyClickFn);\n      }; // open (or close) the menu\n\n\n      this.trigger.addEventListener(this.eventtype, function (ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        if (self.open) {\n          self._resetMenu();\n        } else {\n          self._openMenu();\n        }\n      }); // opening a sub level menu\n\n      this.menuItems.forEach(function (el, i) {\n        // check if it has a sub level\n        var subLevel = el.querySelector(levelsClass);\n\n        if (subLevel) {\n          el.querySelector('.rpm-node-exp').addEventListener(self.eventtype, function (ev) {\n            ev.preventDefault();\n            var level = closest(el, classPrefix + 'mp-level').getAttribute('data-level');\n\n            if (self.level <= level) {\n              ev.stopPropagation();\n              classie.add(closest(el, classPrefix + 'mp-level'), classPrefix + 'mp-level-overlay');\n\n              self._openMenu(subLevel);\n            }\n          });\n        }\n      }); // closing the sub levels :\n      // by clicking on a specific element\n\n      this.levelBack.forEach(function (el, i) {\n        el.addEventListener(self.eventtype, function (ev) {\n          ev.preventDefault();\n          var level = closest(el, classPrefix + 'mp-level').getAttribute('data-level');\n\n          if (self.level <= level) {\n            ev.stopPropagation();\n            self.level = closest(el, classPrefix + 'mp-level').getAttribute('data-level') - 1;\n            self.level === 0 ? self._resetMenu() : self._closeMenu();\n          }\n        });\n      });\n    },\n    _openMenu: function _openMenu(subLevel, init) {\n      var self = this; // increment level depth\n\n      ++this.level; // move the main wrapper\n\n      var levelFactor = (this.level - 1) * this.options.levelSpacing,\n          translateVal = this.options.type === 'overlap' ? this.el.offsetWidth + levelFactor : this.el.offsetWidth;\n\n      this._setTransform('translate3d(' + translateVal + 'px,0,0)');\n\n      if (subLevel) {\n        // reset transform for sublevel\n        this._setTransform('', subLevel); // need to reset the translate value for the level menus that have the same level depth and are not open\n\n\n        for (var i = 0, len = this.levels.length; i < len; ++i) {\n          var levelEl = this.levels[i];\n\n          if (levelEl != subLevel && !classie.has(levelEl, classPrefix + 'mp-level-open')) {\n            this._setTransform('translate3d(-100%,0,0) translate3d(' + -1 * levelFactor + 'px,0,0)', levelEl);\n          }\n        }\n      } // add class mp-pushed to main wrapper if opening the first time\n\n\n      if (this.level === 1) {\n        classie.add(this.wrapper, classPrefix + 'mp-pushed');\n        this.open = true; // the menu should close if clicking somewhere on the body (excluding clicks on the menu)\n\n        document.addEventListener(self.eventtype, function (ev) {\n          if (self.open && !hasParent(ev.target, self.el.id) && self.options.autoHide) {\n            _bodyClickFn(this);\n          }\n        });\n      } // add class mp-level-open to the opening level element\n\n\n      classie.add(subLevel || this.levels[0], classPrefix + 'mp-level-open');\n\n      if (typeof this.options.onMenuOpen === 'function') {\n        this.options.onMenuOpen(this);\n      }\n    },\n    // close the menu\n    _resetMenu: function _resetMenu() {\n      this._setTransform('translate3d(0,0,0)');\n\n      this.level = 0; // remove class mp-pushed from main wrapper\n\n      classie.remove(this.wrapper, classPrefix + 'mp-pushed');\n\n      this._toggleLevels();\n\n      this.open = false;\n\n      if (typeof this.options.onMenuClose === 'function') {\n        this.options.onMenuClose(this);\n      }\n    },\n    // close sub menus\n    _closeMenu: function _closeMenu() {\n      var translateVal = this.options.type === 'overlap' ? this.el.offsetWidth + (this.level - 1) * this.options.levelSpacing : this.el.offsetWidth;\n\n      this._setTransform('translate3d(' + translateVal + 'px,0,0)');\n\n      this._toggleLevels();\n    },\n    // translate the el\n    _setTransform: function _setTransform(val, el) {\n      el = el || this.wrapper;\n      el.style.WebkitTransform = val;\n      el.style.MozTransform = val;\n      el.style.transform = val;\n    },\n    // removes classes mp-level-open from closing levels\n    _toggleLevels: function _toggleLevels() {\n      for (var i = 0, len = this.levels.length; i < len; ++i) {\n        var levelEl = this.levels[i];\n\n        if (levelEl.getAttribute('data-level') >= this.level + 1) {\n          classie.remove(levelEl, classPrefix + 'mp-level-open');\n          classie.remove(levelEl, classPrefix + 'mp-level-overlay');\n        } else if (Number(levelEl.getAttribute('data-level')) == this.level) {\n          classie.remove(levelEl, classPrefix + 'mp-level-overlay');\n        }\n      }\n    }\n  };\n  return mlPushMenu;\n}(window);","map":null,"metadata":{},"sourceType":"script"}